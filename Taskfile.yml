version: '3'

vars:
  GCR_FF:  gcr.io/deepfakes-317408/faceforensics
  GCR_RE:  gcr.io/deepfakes-317408/reverse
  GCR_API: gcr.io/deepfakes-317408/api

  SRV_FF:  faceforensics
  SRV_RE:  reverse
  SRV_API: api

  REGION: europe-west1

tasks:

  # Faceforensics++
  docker-build-ff:
    desc: construir imagen de Docker
    summary: |
      construir imagen de Docker a partir del Dockerfile de este directorio con nombre
      faceforensics
    dir: ./faceforensics
    cmds:
      - docker build -t {{.GCR_FF}} .

  docker-run-ff:
    desc: corre imagen de Docker
    summary: |
      Ejecuta el contenedor Docker creado mediante la orden docker-build
    cmds:
      - xhost +local:docker
      - docker run --rm -it -p 8080:8080 -e PORT=8080 -v `pwd`/faceforensics/src:/app/src {{.GCR_FF}}
  
  docker-consola-ff:
    desc: corre imagen de Docker pero no ejecuta el código
    summary: |
      Ejecuta el contenedor Docker (COMO ROOT) creado mediante la orden docker-build pero no ejecuta el código, si no que mantiene disponible la consola
    cmds:
      - docker run -u 0 --rm -it -p 5000:5000 -e DISPLAY=$IP:1 -v /tmp/.X11-unix:/tmp/.X11-unix -v `pwd`:/app -e VIDEO=003_000.mp4 -e MODEL=ffpp_c40.pth {{.GCR_FF}} /bin/bash


  request-api-ff:
    desc: lanzar la petición a la api que detecta vídeos
    summary: |
      Lanza una petición para la detección de si un vídeo es un deepfake
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth"}' http://localhost:8080

  request-api-gcr-ff:
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth"}' https://faceforensics-utoehvsqvq-ew.a.run.app

  gcloud-build-ff:
    cmds:
      - gcloud builds submit --timeout=1200 --tag {{.GCR_FF}}

  gcloud-send-ff:
    cmds:
      - task: test-ff
      - task: docker-build
      - docker push {{.GCR_FF}}
      - gcloud run deploy {{.SRV_FF}} --image {{.GCR_FF}} --platform managed --allow-unauthenticated --region {{.REGION}}

  test-ff:
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/faceforensics:/app {{.GCR_FF}} -c 'python /app/src/tests.py'

  # Reverse Engineering GM
  docker-build-re:
    desc: construir imagen de Docker
    summary: |
      construir imagen de Docker a partir del Dockerfile de este directorio con nombre reverse
    dir: ./reverse-eng 
    cmds:
      - docker build -t {{.GCR_RE}} .

  docker-console-re:
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`:/code {{.GCR_RE}} -i

  request-api-re:
    desc: lanzar la petición a la api que detecta imágenes
    summary: |
      Lanza una petición para la detección de si una imagen es un deepfake
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300", "model_path":"0_32000_model_31_70-23.pickle"}' http://localhost:8080

  request-api-gcr-re:
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300", "model_path":"0_32000_model_31_70-23.pickle"}' https://reverse-utoehvsqvq-ew.a.run.app

  docker-run-re:
    desc: corre imagen de Docker
    summary: |
      Ejecuta el contenedor Docker creado mediante la orden docker-build
    cmds:
      - docker run --rm -it -p 8080:8080 -e PORT=8080 -v `pwd`/reverse-eng/src:/app {{.GCR_RE}} 

  gcloud-send-re:
    cmds:
      - task: test-re
      - task: docker-build-re
      - docker push {{.GCR_RE}} 
      - gcloud run deploy {{.SRV_RE}} --image {{.GCR_RE}}  --platform managed --allow-unauthenticated --region {{.REGION}}

  test-re:
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/reverse-eng/src:/code {{.GCR_RE}}  -c 'python /code/tests.py'

  #API
  docker-build-api:
    dir: ./api
    cmds:
      - docker build -t {{.GCR_API}}  .

  docker-run-api:
    cmds:
      - docker run -e PORT=8081 -p 8081:8081 {{.GCR_API}}

  test-api:
    dir: ./api
    cmds:
      - go test -v ./tests

  request-api-api-img:
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"servicio":1, "image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300"}' http://localhost:8081

  request-api-api-gcr-img:
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"servicio":1, "image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300"}' https://api-utoehvsqvq-ew.a.run.app

  request-api-api-video:
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"servicio":2, "video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth"}' http://localhost:8081

  request-api-api-gcr-video:
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"servicio":2, "video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth"}' https://api-utoehvsqvq-ew.a.run.app

  gcloud-send-api:
    cmds:
      - task: test-api
      - task: docker-build-api
      - docker push {{.GCR_API}}
      - gcloud run deploy {{.SRV_API}} --image {{.GCR_API}} --platform managed --allow-unauthenticated --region {{.REGION}}

  # Generales 
  docker-rm:
    desc: elimina contenedores
    summary: |
      Eliminar totalmente los contenedores que se están ejecutando
    cmds: 
      - docker stop $(docker ps -aq)
      - docker rm $(docker ps -aq)
  
  docker-rmi-none:
    desc: elimina <none> images
    summary: |
      Eliminar las imágenes que se han quedado como <none> para
    deps:
     # - docker-rm
    cmds:
      - docker rmi $(docker images -f "dangling=true" -q)
