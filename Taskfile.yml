version: '3'

vars:
  GCR_FF:  gcr.io/deepfakes-317408/faceforensics
  GCR_RE:  gcr.io/deepfakes-317408/reverse
  GCR_API: gcr.io/deepfakes-317408/api
  GCR_KIO: gcr.io/deepfakes-317408/kerasio
  GCR_KIO_IMG: gcr.io/deepfakes-317408/kerasioimg
  GCR_RUI: gcr.io/deepfakes-317408/reactui
  GCR_CH: gcr.io/deepfakes-317408/cache


  SRV_FF:  faceforensics
  SRV_RE:  reverse
  SRV_API: api
  SRV_KIO: kerasio
  SRV_RUI: reactui
  SRV_CH:  cache

  REGION: europe-west1

tasks:

  # Faceforensics++
  docker-build-ff:
    desc: Imagen para FaceForensics.
    summary: |
      Construir imagen de docker para el algoritmo FaceForensics. 
    dir: ./faceforensics
    cmds:
      - docker build -t {{.GCR_FF}} .

  docker-run-ff:
    desc: Correr imagen de FaceForensics.
    summary: |
      Ejecuta la imagen con el algoritmo de detección FaceForensics. Monta el volúmen con los archivos necesarios (sobreescribe los alamcenados) y escucha en el puerto 8080.
    cmds:
      # - xhost +local:docker
      - docker run --rm -it -p 8080:8080 -e PORT=8080 -v `pwd`/faceforensics:/app {{.GCR_FF}}
  
  docker-console-ff:
    desc: Correr imagen de FaceForensics en consola.
    summary: |
      Ejecuta el contenedor para Faceforensics accediendo mediante consola
    cmds:
      - docker run --rm -it -p 8080:8080 -e PORT=8080 --entrypoint=/bin/bash -v `pwd`/faceforensics:/app {{.GCR_FF}}

  request-api-ff:
    desc: Petición para Faceforensics en local.
    summary: |
      Ejemplo de una petición al algoritmo de FaceForensics corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth"}' http://localhost:8080

  request-api-gcr-ff:
    desc: Petición para Faceforensics en Google Cloud.
    summary: |
      Ejemplo de una petición al algoritmo de FaceForensics disponible en Googgle Cloud.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth"}' https://faceforensics-utoehvsqvq-ew.a.run.app

  gcloud-send-ff:
    desc: CI/CD FaceForensics.
    summary: |
      Orden para llevar a la cabo la CI/CD para el servicio de FaceForensics. Primero realiza los test, luego construye el contenedor y por último lo despliega.
    cmds:
      - task: test-ff
      - task: docker-build-ff
      - docker push {{.GCR_FF}}
      - gcloud run deploy {{.SRV_FF}} --image {{.GCR_FF}} --platform managed --allow-unauthenticated --region {{.REGION}}

  test-ff:
    desc: Tests FaceForensics.
    summary: |
      Ejecutar los test para el servicio FaceForensics. Destacamos que monta el volúmen con el código y sobreescribe el que tenía por defecto el contenedor.
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/faceforensics:/app {{.GCR_FF}} -c 'python /app/src/tests.py'

  
  # Reverse Engineering GM
  docker-build-re:
    desc: Imagen para ReverseEngineering_GM.
    summary: |
      Construir imagen de docker para el algoritmo ReverseEngineering_GM. 
    dir: ./reverse-eng 
    cmds:
      - docker build -t {{.GCR_RE}} .

  docker-console-re:
    desc: Correr imagen de ReverseEngineering_GM en consola.
    summary: |
      Ejecuta el contenedor para ReverseEngineering_GM accediendo mediante consola
    cmds:
      - docker run -it --rm -p 8082:8082 -e PORT=8082 --entrypoint=/bin/bash -v `pwd`/reverse-eng/src:/app/src {{.GCR_RE}} -i

  request-api-re:
    desc: Petición para ReverseEngineering_GM en local.
    summary: |
      Ejemplo de una petición al algoritmo de ReverseEngineering_GM corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300", "model_path":"0_32000_model_31_70-23.pickle"}' http://localhost:8082

  request-api-gcr-re:
    desc: Petición para ReverseEngineering_GM en Google Cloud.
    summary: |
      Ejemplo de una petición al algoritmo de ReverseEngineering_GM disponible en Googgle Cloud.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300", "model_path":"0_32000_model_31_70-23.pickle"}' https://reverse-utoehvsqvq-ew.a.run.app

  docker-run-re:
    desc: Correr imagen de ReverseEngineering_GM.
    summary: |
      Ejecuta la imagen con el algoritmo de detección ReverseEngineering_GM. Monta el volúmen con los archivos necesarios (sobreescribe los alamcenados) y escucha en el puerto 8082.
    cmds:
      - docker run --rm -it -p 8082:8082 -e PORT=8082 -v `pwd`/reverse-eng/src:/app/src {{.GCR_RE}} 

  gcloud-send-re:
    desc: CI/CD ReverseEngineering_GM.
    summary: |
      Orden para llevar a la cabo la CI/CD para el servicio de ReverseEngineering_GM. Primero realiza los test, luego construye el contenedor y por último lo despliega.
    cmds:
      - task: test-re
      - task: docker-build-re
      - docker push {{.GCR_RE}} 
      - gcloud run deploy {{.SRV_RE}} --image {{.GCR_RE}}  --platform managed --allow-unauthenticated --region {{.REGION}}

  test-re:
    desc: Tests ReverseEngineering_GM.
    summary: |
      Ejecutar los test para el servicio ReverseEngineering_GM. Destacamos que monta el volúmen con el código y sobreescribe el que tenía por defecto el contenedor.
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/reverse-eng/src:/app/src {{.GCR_RE}}  -c 'python /app/src/tests.py'

  #API
  docker-build-api:
    desc: Imagen para la API de entrada.
    summary: |
      Construir imagen de docker para la API de entrada.
    dir: ./api
    cmds:
      - docker build -t {{.GCR_API}}  .

  docker-run-api:
    desc: Correr API de entrada.
    summary: |
      Ejecuta la imagen con la API de entrada. Utiliza el ejecutable disponible en el ordenador y escucha en el puerto 8081.
      Si se tiene instalado Go, se puede ejecutar sin el contenedor mediante la orden > cd api; go run cmd/main/main.go
    cmds:
      - docker run -e PORT=8081 -p 8081:8081 {{.GCR_API}}

  test-api:
    desc: Tests API de entrada.
    summary: |
      Ejecutar los test para la API de entrada. Es necesario tener instalado Go ya que utiliza la versión local
    dir: ./api
    cmds:
      - go test -v ./tests

  request-api-api-img:
    desc: Petición para API en local del servicio ReverseEngineering_GM.
    summary: |
      Ejemplo de una petición a la API en local del servicio ReverseEngineering_GM corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300"}' http://localhost:8081/reverse

  request-api-api-gcr-img:
    desc: Petición para API en Google Cloud del servicio ReverseEngineering_GM.
    summary: |
      Ejemplo de una petición a la API en Google Cloud del servicio ReverseEngineering_GM.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"http://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300"}' https://api-utoehvsqvq-ew.a.run.app/reverse

  request-api-api-video:
    desc: Petición para API en local del servicio FaceForensics.
    summary: |
      Ejemplo de una petición a la API en local del servicio FaceForensics corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth", "full":0}' http://localhost:8081/faceforensics

  request-api-api-gcr-video:
    desc: Petición para API en Google Cloud del servicio FaceForensics.
    summary: |
      Ejemplo de una petición a la API en Google Cloud del servicio FaceForensics.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc", "start_frame":0, "end_frame":2, "model_path":"ffpp_c40.pth", "full":0}' https://api-utoehvsqvq-ew.a.run.app/faceforensics

  request-api-api-keras:
    desc: Petición para API en local del servicio de clasificación de vídeo con Keras.
    summary: |
      Ejemplo de una petición a la API en local del servicio de clasificación de vídeo con Keras corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc"}' http://localhost:8081/kerasio

  request-api-api-gcr-keras:
    desc: Petición para API en Google Cloud del servicio de clasificación de vídeo con Keras.
    summary: |
      Ejemplo de una petición a la API en Google Cloud del servicio de clasificación de vídeo con Keras.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc"}' https://api-utoehvsqvq-ew.a.run.app/kerasio

  request-api-api-kio-img:
    desc: Petición para clasificación de imágenes con Keras en Google Cloud.
    summary: |
      Ejemplo de una petición al algoritmo de clasificación de imágenes con Keras disponible en Googgle Cloud.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"https://i0.wp.com/post.medicalnewstoday.com/wp-content/uploads/sites/3/2020/03/GettyImages-1092658864_hero-1024x575.jpg", "model_path":"https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/classification/5", "image_size":224, "lime":1}' http://localhost:8081/kerasioimg

  gcloud-send-api:
    desc: CI/CD API entrada.
    summary: |
      Orden para llevar a la cabo la CI/CD para la API de entrada. Primero realiza los test, luego construye el contenedor y por último lo despliega.
    cmds:
      - task: test-api
      - task: docker-build-api
      - docker push {{.GCR_API}}
      - gcloud run deploy {{.SRV_API}} --image {{.GCR_API}} --platform managed --allow-unauthenticated --region {{.REGION}}

  request-api-get-ip:
    desc: Petición para API en local para obtener las peticiones de una IP.
    summary: |
      Ejemplo de una petición a la API para obtener las peticiones de una IP corriendo en local.
    cmds:
      - curl -X GET -H "Content-Type:application/json" http://localhost:8081/requests/85.55.32.12

  request-api-post-ip:
    desc: Petición para API en local para añadir las peticiones de una IP.
    summary: |
      Ejemplo de una petición a la API para añadir las peticiones de una IP corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"timestamps":[1,2,25]}' http://localhost:8081/requests/85.55.32.12

  # Keras IO
  docker-build-kio:
    desc: Imagen para la clasificación de vídeo con Keras.
    summary: |
      Construir imagen de docker para la clasificación de vídeo con Keras.
    dir: ./kerasio
    cmds:
      - docker build -t {{.GCR_KIO}}  .

  docker-run-kio:
    desc: Correr imagen de clasificación de vídeo con Keras.
    summary: |
      Ejecuta la imagen con la clasificación de vídeo con Keras. Monta el volúmen con los archivos necesarios (sobreescribe los alamcenados) y escucha en el puerto 8082.
    cmds:
      - docker run --rm -it -p 8083:8083 -e PORT=8083 -v `pwd`/kerasio:/app {{.GCR_KIO}}
  
  docker-console-kio:
    desc: Correr imagen de clasificación de vídeo con Keras en consola.
    summary: |
      Ejecuta el contenedor para clasificación de vídeo con Keras accediendo mediante consola
    cmds:
      - docker run --rm -it -p 8083:8083 -e PORT=8083 --entrypoint=/bin/bash -v `pwd`/kerasio:/app {{.GCR_KIO}}

  request-api-kio:
    desc: Petición para clasificación de vídeo con Keras en local.
    summary: |
      Ejemplo de una petición al algoritmo de clasificación de vídeo con Keras corriendo en local.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc"}' http://localhost:8083

  request-api-gcr-kio:
    desc: Petición para clasificación de vídeo con Keras en Google Cloud.
    summary: |
      Ejemplo de una petición al algoritmo de clasificación de vídeo con Keras disponible en Googgle Cloud.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"video_path":"https://www.youtube.com/watch?v=xLecwguQOIc"}' https://kerasio-utoehvsqvq-ew.a.run.app

  gcloud-send-kio:
    desc: CI/CD clasificación de vídeo con Keras.
    summary: |
      Orden para llevar a la cabo la CI/CD para el servicio de clasificación de vídeo con Keras. Primero realiza los test, luego construye el contenedor y por último lo despliega.
    cmds:
      - task: test-kio
      - task: docker-build-kio
      - docker push {{.GCR_KIO}}
      - gcloud run deploy {{.SRV_KIO}} --image {{.GCR_KIO}} --platform managed --allow-unauthenticated --region {{.REGION}}

  test-kio:
    desc: Tests clasificación de vídeo con Keras.
    summary: |
      Ejecutar los test para el servicio clasificación de vídeo con Keras. Destacamos que monta el volúmen con el código y sobreescribe el que tenía por defecto el contenedor.
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/kerasio:/app {{.GCR_KIO}} -c 'python /app/src/tests.py'

  # Keras IO IMGS
  docker-build-kio-img:
    desc: Imagen para la clasificación de imágenes con Keras.
    summary: |
      Construir imagen de docker para la clasificación de imágenes con Keras.
    dir: ./kerasioimg
    cmds:
      - docker build -t {{.GCR_KIO_IMG}}  .

  docker-run-kio-img:
    desc: Correr imagen de clasificación de imágenes con Keras.
    summary: |
      Ejecuta la imagen con la clasificación de imágenes con Keras. Monta el volúmen con los archivos necesarios (sobreescribe los alamcenados) y escucha en el puerto 8085.
    cmds:
      - docker run --rm -it -p 8085:8085 -e PORT=8085 -v `pwd`/kerasioimg:/app {{.GCR_KIO_IMG}}
  
  docker-console-kio-img:
    desc: Correr imagen de clasificación de imágenes con Keras en consola.
    summary: |
      Ejecuta el contenedor para clasificación de imágenes con Keras accediendo mediante consola
    cmds:
      - docker run --rm -it -p 8085:8085 -e PORT=8085 --entrypoint=/bin/bash -v `pwd`/kerasioimg/src:/app/src {{.GCR_KIO_IMG}}


  request-api-kio-img:
    desc: Petición para clasificación de imágenes con Keras en Google Cloud.
    summary: |
      Ejemplo de una petición al algoritmo de clasificación de imágenes con Keras disponible en Googgle Cloud.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"https://i0.wp.com/post.medicalnewstoday.com/wp-content/uploads/sites/3/2020/03/GettyImages-1092658864_hero-1024x575.jpg", "model_path":"https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/classification/5", "image_size":224, "lime":1}' http://localhost:8085

  request-api-gcr-kio-img:
    desc: Petición para clasificación de imágenes con Keras en Google Cloud.
    summary: |
      Ejemplo de una petición al algoritmo de clasificación de imágenes con Keras disponible en Googgle Cloud.
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"image_path":"https://i0.wp.com/post.medicalnewstoday.com/wp-content/uploads/sites/3/2020/03/GettyImages-1092658864_hero-1024x575.jpg", "model_path":"https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/classification/5", "image_size":224, "lime":1}' https://kerasioimg-utoehvsqvq-ew.a.run.app

  test-kio-img:
    desc: Tests clasificación de imágenes con Keras.
    summary: |
      Ejecutar los test para el servicio clasificación de imágenes con Keras. Destacamos que monta el volúmen con el código y sobreescribe el que tenía por defecto el contenedor.
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/kerasioimg:/app {{.GCR_KIO_IMG}} -c 'python /app/src/tests.py'

  #Cache
  docker-build-ch:
    desc: Imagen para el servicio cache.
    summary: |
      Construir imagen de docker para el servicio cache.
    dir: ./cache
    cmds:
      - docker build -t {{.GCR_CH}}  .

  docker-run-ch:
    desc: Correr servicio cache.
    summary: |
      Ejecuta la imagen con el servicio cache. Monta el volúmen con los archivos necesarios (sobreescribe los alamcenados) y escucha en el puerto 8084.
    cmds:
      - docker run --rm -it -p 8084:8084 -e PORT=8084 -v `pwd`/cache:/app {{.GCR_CH}}

  docker-console-ch:
    desc: Correr el servicio cache en consola.
    summary: |
      Ejecuta el contenedor con el servicio cache accediendo mediante consola
    cmds:
      - docker run --rm -it -p 8084:8084 -e PORT=8084 --entrypoint=/bin/bash -v `pwd`/cache/src:/app/src {{.GCR_CH}}

  request-put-ch:
    desc: Petición para servicio de cache en local.
    summary: |
      Ejemplo de una petición para la cache corriendo en local.
    cmds:
      - curl -X PUT -H "Content-Type:application/json" -d '{"sha":"ej1", "result":"fake", "service":"faceforensics"}' http://localhost:8084/results

  request-put-gcr-ch:
    desc: Petición para servicio de cache en local.
    summary: |
      Ejemplo de una petición para la cache corriendo en local.
    cmds:
      - curl -X PUT -H "Content-Type:application/json" -d '{"sha":"ej2", "result":"real", "service":"kerasio"}' https://cache-utoehvsqvq-ew.a.run.app/results

  request-get-ch:
    desc: Petición para servicio de cache en local.
    summary: |
      Ejemplo de una petición para la cache corriendo en local.
    cmds:
      - curl -X GET -H "Content-Type:application/json" http://localhost:8084/results/ej1/faceforensics

  request-get-gcr-ch:
    desc: Petición para servicio de cache en la nube.
    summary: |
      Ejemplo de una petición para la cache corriendo en la nube.
    cmds:
      - curl -X GET -H "Content-Type:application/json" https://cache-utoehvsqvq-ew.a.run.app/results/ej2/kerasio


  request-post-user-ch:
    desc: Petición de almacenar peticiones para servicio de cache en local.
    summary: |
      Ejemplo de una petición para la cache corriendo en local para almacenar las peticiones
    cmds:
      - curl -X POST -H "Content-Type:application/json" -d '{"timestamps":[55,22,53]}' http://localhost:8084/requests/85.55.32.12

  request-get-user-ch:
    desc: Petición de almacenar peticiones para servicio de cache en local.
    summary: |
      Ejemplo de una petición para la cache corriendo en local para almacenar las peticiones
    cmds:
      - curl -X GET "Content-Type:application/json" http://localhost:8084/requests/85.55.32.12

  test-ch:
    desc: Tests para el servicio cache.
    summary: |
      Ejecutar los test para el servicio cache. Destacamos que monta el volúmen con el código y sobreescribe el que tenía por defecto el contenedor.
    cmds:
      - docker run -it --rm --entrypoint=/bin/bash -v `pwd`/cache:/app {{.GCR_CH}} -c 'python /app/src/tests.py'

  gcloud-send-ch:
    desc: CI/CD cache.
    summary: |
      Orden para llevar a la cabo la CI/CD para el servicio de cache. Primero realiza los test, luego construye el contenedor y por último lo despliega.
    cmds:
      - task: test-ch
      - task: docker-build-ch
      - docker push {{.GCR_CH}}
      - gcloud run deploy {{.SRV_CH }} --image {{.GCR_CH }} --platform managed --allow-unauthenticated --region {{.REGION}}


  # React
  docker-build-rui:
    desc: Imagen con React.
    summary: |
      Construir imagen de docker para la interfaz de usuario creada con React y servida mediante Nginx.
    dir: ./react-ui
    cmds:
      - docker build -t {{.GCR_RUI}}  .

  docker-run-rui:
    desc: Correr imagen de React.
    summary: |
      Ejecuta la imagen con con la interfaz de usuario creada con React.
    cmds:
      - docker run --rm -it -p 80:80 {{.GCR_RUI}}

  gcloud-send-rui:
    desc: CI/CD React.
    summary: |
      Llevar a la cabo la CI/CD para la interfaz de usuario con React.
    cmds:
      - task: docker-build-rui
      - docker push {{.GCR_RUI}}
      - gcloud run deploy {{.SRV_RUI}} --image {{.GCR_RUI}} --platform managed --allow-unauthenticated --region {{.REGION}} --port=80

  # Generales 
  docker-rm:
    desc: Elimina contenedores.
    summary: |
      Eliminar totalmente los contenedores que se están ejecutando.
    cmds: 
      - docker stop $(docker ps -aq)
      - docker rm $(docker ps -aq)
  
  docker-rmi-none:
    desc: Elimina <none> images.
    summary: |
      Eliminar las imágenes que se han quedado como <none> para liberar espacio.
    deps:
     # - docker-rm
    cmds:
      - docker rmi $(docker images -f "dangling=true" -q)


# Contenedores credenciales
  docker-build-kio-img-cred:
    desc: Imagen para las credenciales de Keras.
    summary: |
      Construir imagen de docker con las credenciales de Keras para poder conectar con cloud storage. 
    dir: ./keasioimg
    cmds:
      - docker build -f ./Aux.Dockerfile -t gcr.io/deepfakes-317408/kerascred .


  docker-build-ch-cred:
    desc: Imagen para las credenciales de la cache.
    summary: |
      Construir imagen de docker con las credenciales de la cache para poder conectar con firestore. 
    dir: ./cache
    cmds:
      - docker build -f ./Aux.Dockerfile -t gcr.io/deepfakes-317408/cachecred .
